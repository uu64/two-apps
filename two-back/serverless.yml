service: two-back
frameworkVersion: '1'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}
  stackName: ${opt:stack-name, 'two-back'}
  websocketsApiRouteSelectionExpression: $request.body.action
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - sqs:*
      Resource: '*'

plugins:
  - serverless-offline

custom:
  serverless-offline:
    useDocker: true

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  problem:
    handler: bin/problem
    events:
      - http:
          path: problem
          method: get
          request:
            parameters:
              querystrings:
                num: false
  join:
    handler: bin/game/join
    events:
      - websocket:
          route: $connect
  leave:
    handler: bin/game/leave
    events:
      - websocket:
          route: $disconnect
  publish:
    handler: bin/game/publish
    events:
      - websocket:
          route: publish

resources:
  Resources:
    rooms:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rooms
        AttributeDefinitions:
          - AttributeName: RoomID
            AttributeType: S
        KeySchema:
          - AttributeName: RoomID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: ConnectionID
            AttributeType: S
        KeySchema:
          - AttributeName: ConnectionID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    matching:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: matching
        MessageRetentionPeriod: 180
